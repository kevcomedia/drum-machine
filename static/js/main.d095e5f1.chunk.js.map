{"version":3,"sources":["DrumPad.js","audioMap.js","DrumPads.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","key","callback","_useIsActive","_useState","useState","_useState2","Object","slicedToArray","isActive","setIsActive","useEffect","id","setTimeout","clearTimeout","useIsActive","_useIsActive2","audioRef","useRef","handleActivate","audioElem","current","currentTime","play","onActivate","audioName","label","handleKeyDown","event","keyCode","charCodeAt","document","addEventListener","removeEventListener","react_default","a","createElement","Fragment","className","onClick","src","audioSrc","preload","ref","audioMap","Q","W","E","A","S","D","Z","X","C","labels","DrumPads","map","src_DrumPad","App","display","setDisplay","src_DrumPads","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAyEeA,MArEf,SAAiBC,GAAO,IAsDJC,EAAKC,EAtDDC,EAyCxB,WAAuB,IAAAC,EACWC,oBAAS,GADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACJI,EADIJ,EAAA,GAUrB,OAPAK,oBAAU,WACR,IAAMC,EAAKC,WAAW,WACpBH,GAAY,IACX,KACH,OAAO,kBAAMI,aAAaF,KACzB,CAACH,IAEG,CAACA,EAAUC,GAlDcK,GADVC,EAAAT,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACfM,EADeO,EAAA,GACLN,EADKM,EAAA,GAEhBC,EAAWC,iBAAO,MAElBC,EAAiB,WAgCzB,IAAmBC,KA/BLH,EAASI,SAgCXC,YAAc,EACxBF,EAAUG,OAhCRvB,EAAMwB,WAAWxB,EAAMyB,WACvBf,GAAY,IAKd,OA0CkBT,EA5CPD,EAAM0B,MA4CMxB,EA5CCiB,EA6CxBR,oBAAU,WACR,IAAMgB,EAAgB,SAACC,GACjBA,EAAMC,UAAY5B,EAAI6B,cACxB5B,KAKJ,OADA6B,SAASC,iBAAiB,UAAWL,GAC9B,WACLI,SAASE,oBAAoB,UAAWN,MAnD1CO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UACEE,UAAW7B,EAAW,2BAA6B,WACnD8B,QAASpB,GAERnB,EAAM0B,OAETQ,EAAAC,EAAAC,cAAA,SACEE,UAAU,OACVE,IAAKxC,EAAMyC,SACXC,QAAQ,OACRC,IAAK1B,MC5BE2B,EAAA,CACbC,EAAG,CAAC,2DAA4D,YAChEC,EAAG,CAAC,2DAA4D,YAChEC,EAAG,CAAC,2DAA4D,YAChEC,EAAG,CAAC,6DAA8D,YAClEC,EAAG,CAAC,2DAA4D,QAChEC,EAAG,CAAC,yDAA0D,WAC9DC,EAAG,CACD,6DACA,eAEFC,EAAG,CAAC,6DAA8D,QAClEC,EAAG,CAAC,yDAA0D,cCJ1DC,SAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAsBzCC,MApBf,SAAkBvD,GAChB,OACEkC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACZgB,EAAOE,IAAI,SAAC9B,GAAD,OACVQ,EAAAC,EAAAC,cAACqB,EAAD,CACExD,IAAKyB,EACLA,MAAOA,EACPe,SAAUG,EAASlB,GAAO,GAC1BD,UAAWmB,EAASlB,GAAO,GAC3BF,WAAYxB,EAAMwB,uBCJbkC,MAXf,WAAe,IAAAtD,EACiBC,mBAAS,IAD1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNuD,EADMrD,EAAA,GACGsD,EADHtD,EAAA,GAGb,OACE4B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACyB,EAAD,CAAUrC,WAAYoC,IACtB1B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWqB,KCEZG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAStC,SAASuC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d095e5f1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './DrumPad.css';\n\nfunction DrumPad(props) {\n  const [isActive, setIsActive] = useIsActive();\n  const audioRef = useRef(null);\n\n  const handleActivate = () => {\n    playAudio(audioRef.current);\n    props.onActivate(props.audioName);\n    setIsActive(true);\n  };\n\n  useKeyDown(props.label, handleActivate);\n\n  return (\n    <>\n      <button\n        className={isActive ? 'drum-pad drum-pad_active' : 'drum-pad'}\n        onClick={handleActivate}\n      >\n        {props.label}\n      </button>\n      <audio\n        className=\"clip\"\n        src={props.audioSrc}\n        preload=\"auto\"\n        ref={audioRef}\n      />\n    </>\n  );\n}\n\nDrumPad.propTypes = {\n  label: PropTypes.string.isRequired,\n  audioSrc: PropTypes.string.isRequired,\n  audioName: PropTypes.string.isRequired,\n};\n\nfunction playAudio(audioElem) {\n  audioElem.currentTime = 0;\n  audioElem.play();\n}\n\nfunction useIsActive() {\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setIsActive(false);\n    }, 100);\n    return () => clearTimeout(id);\n  }, [isActive]);\n\n  return [isActive, setIsActive];\n}\n\nfunction useKeyDown(key, callback) {\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.keyCode === key.charCodeAt()) {\n        callback();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n}\n\nexport default DrumPad;\n","export default {\n  Q: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3', 'Heater 1'],\n  W: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3', 'Heater 2'],\n  E: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3', 'Heater 3'],\n  A: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3', 'Heater 4'],\n  S: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3', 'Clap'],\n  D: ['https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3', 'Open HH'],\n  Z: [\n    'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n    \"Kick n' Hat\",\n  ],\n  X: ['https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3', 'Kick'],\n  C: ['https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3', 'Closed HH'],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DrumPad from './DrumPad';\nimport audioMap from './audioMap';\nimport './DrumPads.css';\n\n// This ordering of the labels is important, so I'm hardcoding this array\n// instead of using `Object.keys` on `audioMap`.\nconst labels = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\n\nfunction DrumPads(props) {\n  return (\n    <div className=\"drum-pads\">\n      {labels.map((label) => (\n        <DrumPad\n          key={label}\n          label={label}\n          audioSrc={audioMap[label][0]}\n          audioName={audioMap[label][1]}\n          onActivate={props.onActivate}\n        />\n      ))}\n    </div>\n  );\n}\n\nDrumPads.propTypes = {\n  onActivate: PropTypes.func,\n}\n\nexport default DrumPads;\n","import React, { useState } from 'react';\nimport DrumPads from './DrumPads';\nimport './App.css';\n\nfunction App() {\n  const [display, setDisplay] = useState('');\n\n  return (\n    <div className=\"App\">\n      <DrumPads onActivate={setDisplay} />\n      <div className=\"display\">{display}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}